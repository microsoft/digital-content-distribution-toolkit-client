apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        //Production
        release {
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

        }
        //dev
        debug {
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.9.0'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'

    implementation "com.squareup.retrofit2:converter-moshi:2.4.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.9.2"
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation "androidx.room:room-runtime:$room_version"

    implementation 'com.github.bumptech.glide:glide:4.11.0'

    // Dagger dependencies
    def dagger_version = "2.44.2"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt 'com.google.dagger:dagger-android-processor:2.27'


    //Exoplayer
    implementation 'com.google.android.exoplayer:exoplayer-core:2.15.1'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.15.1'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.15.1'
    implementation 'com.google.android.exoplayer:extension-okhttp:2.15.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation('com.squareup.okhttp3:mockwebserver:4.9.1')
    testImplementation 'org.robolectric:robolectric:4.7.3'
    testImplementation "org.mockito:mockito-core:3.4.6"
    testImplementation 'io.mockk:mockk:1.12.2'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
    kaptTest 'com.google.dagger:dagger-compiler:' + dagger_version
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:' + dagger_version
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.2'
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId 'com.msr.bine-sdk'
            version '0.0.2'
            artifactId 'bine-sdk'
            artifact("$buildDir/outputs/aar/${artifactId}-debug.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    if (dependency.name != 'unspecified' && !dependency.name.contains("compiler")) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
                configurations.annotationProcessor.allDependencies.each { dependency ->
                    if (dependency.name != 'unspecified' && !dependency.name.contains("compiler")) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
}

dependencyLocking {
    lockAllConfigurations()
}
